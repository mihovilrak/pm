# Build frontend
FROM node:23-alpine3.19 AS frontend-builder

# Set working directory
WORKDIR /app/fe

# Copy package and lock files
COPY fe/package*.json fe/yarn.lock ./

# Install dependencies
RUN mkdir node_modules && \
    yarn config set cache-folder /tmp/yarn-cache && \
    yarn install --frozen-lockfile --prefer-offline \
    --production=true --link-duplicates --ignore-optional && \
    yarn add -D @babel/plugin-proposal-private-property-in-object && \
    yarn cache clean --all

# Copy source code
COPY fe/src/ ./src/
COPY fe/public/ ./public/

# Set environment variables
ENV NODE_OPTIONS=--openssl-legacy-provider
ENV BABEL_ENV=production

# Build the frontend
RUN yarn run build --verbose

# Build backend
FROM node:23-alpine3.19 AS backend-builder

# Set working directory
WORKDIR /app/api

# Copy package and lock files
COPY api/package*.json api/yarn.lock ./

# Install dependencies
RUN mkdir node_modules && \
    yarn config set cache-folder /tmp/yarn-cache && \
    yarn install --frozen-lockfile --prefer-offline \
    --production=true --link-duplicates --ignore-optional && \
    npm install -g @vercel/ncc && \
    yarn cache clean --all

# Copy source code
COPY api/src/ ./src/

# Build the API
RUN ncc build src/app.js -o dist --no-cache -q

# Build notification service
FROM node:23-alpine3.19 AS notification-builder

# Set working directory
WORKDIR /app/service

# Copy package and lock files
COPY notification-service/package*.json notification-service/yarn.lock ./

# Install dependencies
RUN mkdir node_modules && \
    yarn config set cache-folder /tmp/yarn-cache && \
    yarn install --frozen-lockfile --prefer-offline \
    --production=true --link-duplicates --ignore-optional && \
    npm install -g @vercel/ncc && \
    yarn cache clean --all

# Copy source code
COPY notification-service/src/ ./src/

# Build the service
RUN ncc build src/index.js -o dist --no-cache -q

# Build Go startup binary
FROM golang:1.21-alpine AS go-builder
WORKDIR /build
COPY start-app.go .
RUN go mod init start-app && \
    CGO_ENABLED=0 GOOS=linux go build -o start-app

# Create system files builder
FROM alpine:3.19 AS sys-builder
RUN apk add --no-cache \
    postgresql15-client \
    nginx \
    tzdata

# Create cron files
RUN mkdir -p /etc/cron.d && \
    mkdir -p /var/spool/cron/crontabs && \
    mkdir -p /etc/crontabs && \
    mkdir -p /var/cache/nginx
COPY db/pg_dump_cron /etc/cron.d/pg_dump_cron
RUN crontab /etc/cron.d/pg_dump_cron

# Final image
FROM gcr.io/distroless/nodejs20-debian12

# Copy required binaries and configs from sys-builder
COPY --from=sys-builder /usr/bin/psql /usr/bin/
COPY --from=sys-builder /usr/bin/pg_isready /usr/bin/
COPY --from=sys-builder /usr/bin/pg_dump /usr/bin/
COPY --from=sys-builder /usr/sbin/nginx /usr/sbin/
COPY --from=sys-builder /usr/sbin/crond /usr/sbin/
COPY --from=sys-builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy PostgreSQL files
COPY --from=sys-builder /usr/lib/postgresql* /usr/lib/postgresql/
COPY --from=sys-builder /usr/share/postgresql* /usr/share/postgresql/

# Copy cron configuration
COPY --from=sys-builder /etc/cron.d /etc/cron.d
COPY --from=sys-builder /var/spool/cron /var/spool/cron
COPY --from=sys-builder /etc/crontabs /etc/crontabs

# Copy NGINX files
COPY --from=sys-builder /etc/nginx /etc/nginx
COPY fe/nginx.conf /etc/nginx/nginx.conf

# Create required directories
WORKDIR /app

COPY --from=sys-builder /var/log/nginx /var/log/nginx
COPY --from=sys-builder /var/cache/nginx /var/cache/nginx
COPY --from=sys-builder /run /run
COPY --from=sys-builder /var/lib/nginx/tmp /var/lib/nginx/tmp

# Copy startup binary
COPY --from=go-builder /build/start-app /usr/local/bin/

# Copy applications
COPY --from=frontend-builder /app/fe/build /usr/share/nginx/html
COPY --from=backend-builder /app/api/dist/* /app/api/
COPY --from=notification-builder /app/service/dist/* /app/service/

# Copy database init scripts
COPY db/init/ /app/db-init/
COPY db/backup.sh /usr/local/bin/backup.sh

# Expose ports
EXPOSE 80 5000

# Use nonroot user (provided by distroless)
USER nonroot:nonroot

# Use the compiled Go binary as entrypoint
ENTRYPOINT ["/usr/local/bin/start-app"]